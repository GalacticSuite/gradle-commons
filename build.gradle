import net.galacticraft.gradle.Util

plugins {
	alias(libs.plugins.licenser)
	alias(libs.plugins.lombok)
	id 'maven-publish'
	id 'java-library'
	id 'eclipse'
}

repositories {
	mavenCentral()
}

version = "1.0." + getBuildNumber()
group = "net.galacticraft.gradle"

java {
	withSourcesJar()
}

dependencies {
	compileOnly localGroovy()
	compileOnly gradleApi()
	compileOnly libs.plexus.utils
	compileOnly libs.google.guava
	compileOnly libs.google.gson
	compileOnly libs.commons.text
	implementation libs.okhttp3
}

jar {
	manifest Util.getManifest(project)
}

publishing {
	publications {
		Core(MavenPublication) {
			artifactId 'core'
			groupId group
			version version

			from components.java
		}
	}
	repositories {
		maven Util.getGalacticPluginMaven(project)
		maven Util.getGalacticInternalMaven(project)
	}
}

license {
	header = rootProject.file("HEADER.txt")
	include '**/*.java'
	properties {
		name = "gradle-commons"
		organization = "Team Galacticraft"
		url = "https://github.com/GalacticSuite/gradle-commons"
	}
}

String getBuildNumber() {
	def versionFile = file('version.properties')
	if (versionFile.canRead()) {
		Properties versionProps = new Properties()
		versionProps.load(new FileInputStream(versionFile))
		return versionProps['build_num'].toString()
	}
	return "1"
}

task incrementBuild {
	doFirst {
		def versionFile = file('version.properties')
		if (versionFile.canRead()) {
			Properties versionProps = new Properties()
			versionProps.load(new FileInputStream(versionFile))
			def num = versionProps['build_num'].toInteger() + 1
			println("incrementing BuildNumber to: " + num)
			versionProps['build_num'] = num.toString()
			versionProps.store(versionFile.newWriter(), null)
		} else {
			println("version.properties file not found! Ignoring.")
		}
	}
}

task publishDistributed(type: Jar) {
	group = "publishing"
	dependsOn 'publishCorePublicationToGalacticPluginsRepository', 'publishCorePublicationToGalacticInternalRepository', 'publishCorePublicationToMavenLocal'
	finalizedBy 'incrementBuild'
}

import org.gradle.plugins.ide.eclipse.model.AbstractLibrary
import org.gradle.plugins.ide.eclipse.model.internal.FileReferenceFactory

def srcFolder = file("C:\\gradle\\gradle-8.0.2\\src")

eclipse {
	classpath {
		file {
			whenMerged { classpath ->
				String version = project.gradle.gradleVersion
				String gradleSourceDirectory = srcFolder.getAbsolutePath()
				classpath.entries.each { entry ->
					if (entry in AbstractLibrary && entry.library.path.contains('generated-gradle-jars')) {
						entry.sourcePath =
								new FileReferenceFactory().fromPath(gradleSourceDirectory)
					}
				}
			}
		}
	}
}